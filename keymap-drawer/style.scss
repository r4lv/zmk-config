// inherit to force styles through use tags
svg path {
    fill: inherit;
}

/* font and background color specifications */
svg.keymap {
    font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
    font-size: 14px;
    font-kerning: normal;
    text-rendering: optimizeLegibility;
    fill: #24292e;
}

/* default key styling */
rect.key {
    fill: #f6f8fa;
    stroke: #c9cccf;
    stroke-width: 1;
}

/* default key side styling, only used is draw_key_sides is set */
rect.side {
    filter: brightness(90%);
}

/* color accent for combo boxes */
rect.combo, rect.combo-separate {
    fill: #cdf;
}

/* color accent for held keys */
rect.held, rect.combo.held {
    fill: #fdd;
}

/* color accent for ghost (optional) keys */
rect.ghost, rect.combo.ghost {
    stroke-dasharray: 4, 4;
    stroke-width: 2;
}

text {
    text-anchor: middle;
    dominant-baseline: middle;
}

/* styling for layer labels */
text.label {
    font-weight: bold;
    text-anchor: start;
    stroke: white;
    stroke-width: 2;
    paint-order: stroke;
}

/* styling for combo tap, and key hold/shifted label text */
text.combo, text.hold, text.shifted {
    font-size: 11px;
}

text.hold {
    text-anchor: middle;
    dominant-baseline: auto;
}

text.shifted {
    text-anchor: middle;
    dominant-baseline: hanging;
}

/* styling for hold/shifted label text in combo box */
text.combo.hold, text.combo.shifted {
    font-size: 8px;
}

/* lighter symbol for transparent keys */
text.trans {
    fill: #7b7e81;
}
.key.trans{
    opacity: 0.7;
}

/* styling for combo dendrons */
path.combo {
    stroke-width: 1;
    stroke: gray;
    fill: none;
}



/* Start Tabler Icons Cleanup */
/* cannot use height/width with glyphs */
.icon-tabler > path {
    fill: inherit;
    stroke: inherit;
    stroke-width: 2;
}
/* hide tabler's default box */
.icon-tabler > path[stroke="none"][fill="none"] {
    visibility: hidden;
}
/* End Tabler Icons Cleanup */


//==============================================================================

.rsym {
  rect{
    stroke: #86198f /*fuchsia-800*/;
  }
  .glyph, text{
    fill: #86198f /*fuchsia-800*/;
  }
  
}
.rlayer {
  rect{
    stroke: #65a30d /*lime-600*/;
    fill: #f7fee7 /*lime-50*/;
  }
  .glyph, text{
    fill: #65a30d /*lime-600*/;
  }
  .glyph, &-held .glyph {
    transform: scale(1.5);
  }
  &-held rect{
    stroke: #65a30d /*lime-600*/;
    fill: #65a30d;
  }
  &-held .glyph, &-held text{
    fill: white;
  }
}


.rmod {
  rect{
    stroke: #be123c /*rose-700*/;
  }
  .glyph, text {
    fill: #be123c /*rose-700*/;
  }
}

rect.held, rect.combo.held {
  stroke: #65a30d /*lime-600*/;
  fill: #65a30d;
}
rect.combo, rect.combo-separate{
  fill: #d4d4d4 /* neutral-300 */;
  opacity: 0.9;
}



.key.shifted, .key.hold {
  opacity: .6
}

.layer-one .keypos-7, 
.layer-one .keypos-8, 
.layer-one .keypos-9,
.layer-one .keypos-18,
.layer-one .keypos-19,
.layer-one .keypos-20,
.layer-one .keypos-21,
.layer-one .keypos-30,
.layer-one .keypos-31,
.layer-one .keypos-32,
.layer-one .keypos-33
{
  xxx_fill: #d97706 /* amber-600 */;
}

.keypos-38, .keypos-39{
  rect{
      stroke: #65a30d /*lime-600*/;
      fill: #f7fee7 /*lime-50*/;
  }
  text, .glyph{
      fill: #65a30d /*lime-600*/;
  }

}


rect.held{
  // overwrite
  stroke: #65a30d /*lime-600*/;
  fill: #65a30d;
}


text.label{
  // shift layer label down just above the keys
  transform: translate(0, 20px); // chrome
  transform: translate(0, 20); // resvg
}


