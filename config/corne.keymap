#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include "keys_de.h"
#include "keypos_qwertz.h"

#define BSE 0
#define CDE 1
#define NAV 2
#define TRI 3


#define R_SHIFTED(NAME, REGULAR, SHIFTED) \
    NAME: NAME { \
        compatible = "zmk,behavior-mod-morph"; \
        #binding-cells = <0>; \
        bindings = REGULAR, SHIFTED; \
        mods = <(MOD_LSFT|MOD_RSFT)>; \
    };
#define R_SHIFT_CMD_NUM(NAME, NUMBER) \
    NAME: NAME { \
        compatible = "zmk,behavior-mod-morph"; \
        #binding-cells = <0>; \
        bindings = <&kp NUMBER>, <&kp LG(NUMBER)>; \
        mods = <(MOD_LSFT|MOD_RSFT)>; \
        keep-mods = <(MOD_LSFT|MOD_RSFT)>; \
    };

#define R_UNI_START <&macro_tap &kp LC(SPACE)>, <&macro_press &kp LALT>
#define R_UNI_END <&macro_release &kp LALT>, <&macro_tap &kp LC(SPACE)>
#define R_UNICODE(NAME, U1, U2, U3, U4) ZMK_MACRO(NAME, wait-ms = <40>; tap-ms = <40>; \
    bindings = R_UNI_START, <&macro_tap &kp U1 &kp U2 &kp U3 &kp U4>, R_UNI_END;)

#define HYPER(keycode) LS(LC(LA(LG(keycode))))
#define HY HYPER

&mt {
    // overwrite settings
    flavor = "tap-preferred"; // default is "hold-preferred"
};

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_base {
            bindings = <
/* ╭──────────┬─────────┬─────────┬─────────┬───────────┬─────────╮   ╭─────────┬──────────┬─────────────┬───────────┬─────────────┬─────────────────────╮ */
    &kp TAB    &kp DE_Q  &kp DE_W  &kp DE_E  &kp DE_R    &kp DE_T      &kp DE_Z  &kp DE_U   &kp DE_I      &kp DE_O    &kp DE_P      &kp BSPC
/* ├──────────┼─────────┼─────────┼─────────┼───────────┼─────────┤   ├─────────┼──────────┼─────────────┼───────────┼─────────────┼─────────────────────┤ */
    &kp LCTRL  &kp DE_A  &kp DE_S  &kp DE_D  &kp DE_F    &kp DE_G      &kp DE_H  &kp DE_J   &kp DE_K      &kp DE_L    &kp DE_PLUS   &kp DE_HASH
/* ├──────────┼─────────┼─────────┼─────────┼───────────┼─────────┤   ├─────────┼──────────┼─────────────┼───────────┼─────────────┼─────────────────────┤ */
    &kp LSHFT  &kp DE_Y  &kp DE_X  &kp DE_C  &kp DE_V    &kp DE_B      &kp DE_N  &kp DE_M   &kp DE_COMMA  &kp DE_DOT  &kp DE_MINUS  &magicshift RSHIFT 0
/* ╰──────────┴─────────┴─────────┼─────────┼───────────┼─────────┤   ├─────────┼──────────┼─────────────┼───────────┴─────────────┴─────────────────────╯ */
                                   &kp LCMD  &kp RETURN  &mo CDE       &mo NAV   &kp SPACE  &kp LALT
/*                                ╰─────────┴───────────┴─────────╯   ╰─────────┴──────────┴─────────────╯                                                 */
            >;
        };

        layer_code {
            bindings = <
/* ╭──────────────────┬─────────────┬────────────┬─────────────┬──────────────┬────────────╮   ╭─────────────┬────────────┬─────────────┬────────────┬─────────────┬──────────╮ */
    &kp LS(LA(KP_N7))  &kp DE_EXCL   &kp DE_BSLH  &kp DE_COLON  &kp DE_DOLLAR  &none            &kp DE_PRCNT  &kp DE_AMPS  &kp DE_EQUAL  &kp DE_FSLH  &kp DE_QMARK  &mm_bspc
/* ├──────────────────┼─────────────┼────────────┼─────────────┼──────────────┼────────────┤   ├─────────────┼────────────┼─────────────┼────────────┼─────────────┼──────────┤ */
    &kp LCTRL          &kp DE_LBKT   &kp DE_LT    &kp DE_LPAR   &kp DE_SQT     &kp DE_LBRC      &kp DE_RBRC   &kp DE_DQT   &kp DE_RPAR   &kp DE_GT    &kp DE_RBKT   &kp RALT
/* ├──────────────────┼─────────────┼────────────┼─────────────┼──────────────┼────────────┤   ├─────────────┼────────────┼─────────────┼────────────┼─────────────┼──────────┤ */
    &kp LSHFT          &kp DE_UNDER  &kp DE_PLUS  &kp DE_SEMI   &kp DE_ASTRK   &kp DE_HASH      &kp DE_TILDE  &kp DE_PIPE  &trans        &trans       &trans        &kp RSHFT
/* ╰──────────────────┴─────────────┴────────────┼─────────────┼──────────────┼────────────┤   ├─────────────┼────────────┼─────────────┼────────────┴─────────────┴──────────╯ */
                                                  &kp LCMD      &trans         &none            &mo NAV       &trans       &kp LALT
/*                                               ╰─────────────┴──────────────┴────────────╯   ╰─────────────┴────────────┴─────────────╯                                       */
            >;
        };

        layer_navi {
            bindings = <
/* ╭──────────┬─────────────┬──────────┬──────────┬──────────┬─────────────╮   ╭──────────┬─────────────┬─────────┬──────────────┬────────┬──────────╮ */
    &emoji     &mm_uml_circ  &mm_7      &kp DE_N8  &kp DE_N9  &kp DE_SZ         &kp HOME   &kp LG(LEFT)  &kp UP    &kp LG(RIGHT)  &kp END  &mm_bspc
/* ├──────────┼─────────────┼──────────┼──────────┼──────────┼─────────────┤   ├──────────┼─────────────┼─────────┼──────────────┼────────┼──────────┤ */
    &kp LCTRL  &kp DE_ACUTE  &mm_4      &kp DE_N5  &kp DE_N6  &kp DE_DOT        &kp PG_UP  &kp LEFT      &kp DOWN  &kp RIGHT      &none    &kp RALT
/* ├──────────┼─────────────┼──────────┼──────────┼──────────┼─────────────┤   ├──────────┼─────────────┼─────────┼──────────────┼────────┼──────────┤ */
    &kp LSHFT  &kp DE_N0     &kp DE_N1  &kp DE_N2  &mm_3      &kp DE_COMMA      &kp PG_DN  &kp LA(LEFT)  &none     &kp LA(RIGHT)  &none    &kp RSHFT
/* ╰──────────┴─────────────┴──────────┼──────────┼──────────┼─────────────┤   ├──────────┼─────────────┼─────────┼──────────────┴────────┴──────────╯ */
                                        &kp LCMD   &trans     &mo CDE           &trans     &trans        &kp LALT
/*                                     ╰──────────┴──────────┴─────────────╯   ╰──────────┴─────────────┴─────────╯                                    */
            >;
        };

        layer_tri {
            bindings = <
/* ╭───────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭──────────────┬─────────────┬─────────────────┬───────────────┬─────────────────┬─────────────────────────╮ */
    &mm_out     &kp F16       &kp F17       &kp HY(DE_E)  &kp C_PREV    &kp C_NEXT        &kp DE_BULLET  &kp HY(DE_U)  &kp HY(DE_I)      &kp HY(DE_O)    &kp LC(LG(DE_Q))  &kp C_AL_KEYBOARD_LAYOUT
/* ├───────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├──────────────┼─────────────┼─────────────────┼───────────────┼─────────────────┼─────────────────────────┤ */
    &mm_btsel1  &kp HY(DE_A)  &kp HY(DE_S)  &kp HY(DE_D)  &kp C_VOL_DN  &kp C_VOL_UP      &kp DE_PM      &kp HY(DE_J)  &kp HY(DE_K)      &kp HY(DE_L)    &kp HY(DE_O_UML)  &kp HY(DE_A_UML)
/* ├───────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├──────────────┼─────────────┼─────────────────┼───────────────┼─────────────────┼─────────────────────────┤ */
    &mm_btsel0  &kp HY(DE_Y)  &kp HY(DE_X)  &kp HY(DE_C)  &kp HY(DE_V)  &kp HY(DE_B)      &kp DE_DEGREE  &kp HY(DE_M)  &kp HY(DE_COMMA)  &kp HY(DE_DOT)  &kp HY(DE_MINUS)  &kp RSHIFT
/* ╰───────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├──────────────┼─────────────┼─────────────────┼───────────────┴─────────────────┴─────────────────────────╯ */
                                            &trans        &trans        &trans            &trans         &trans        &trans
/*                                         ╰─────────────┴─────────────┴─────────────╯   ╰──────────────┴─────────────┴─────────────────╯                                                             */
            >;
        };
    };
 
    combos {
        compatible = "zmk,combos";

        tq { key-positions = <posTAB posQ>; bindings = <&kp ESC>; layers = <0>; require-prior-idle-ms = <500>; };
        qw { key-positions = <posQ posW>; bindings = <&kp DE_LBRC>; layers = <0>; require-prior-idle-ms = <500>; };
        we { key-positions = <posW posE>; bindings = <&kp DE_LPAR>; layers = <0>; require-prior-idle-ms = <500>; };
        er { key-positions = <posE posR>; bindings = <&kp DE_LBKT>; layers = <0>; require-prior-idle-ms = <500>; };
        ui { key-positions = <posU posI>; bindings = <&kp DE_RBKT>; layers = <0>; require-prior-idle-ms = <500>; };
        io { key-positions = <posI posO>; bindings = <&kp DE_RPAR>; layers = <0>; require-prior-idle-ms = <500>; };
        op { key-positions = <posO posP>; bindings = <&kp DE_RBRC>; layers = <0>; require-prior-idle-ms = <500>; };
            
        xc { key-positions = <posX posC>;     bindings = <&kp DE_LBRC>; layers = <0>; require-prior-idle-ms = <500>; };
        cv { key-positions = <posC posV>;     bindings = <&kp DE_BSLH>; layers = <0>; require-prior-idle-ms = <500>; };
        mc { key-positions = <posM posKOM>;   bindings = <&kp DE_FSLH>; layers = <0>; require-prior-idle-ms = <500>; };
        cp { key-positions = <posKOM posPNK>; bindings = <&kp DE_RBRC>; layers = <0>; require-prior-idle-ms = <500>; };

        n1 { key-positions = <posQ posA>;  bindings = <&kp N1>; layers = <0>; require-prior-idle-ms = <200>; };
        n2 { key-positions = <posW posS>;  bindings = <&kp N2>; layers = <0>; require-prior-idle-ms = <200>; };
        n3 { key-positions = <posE posD>;  bindings = <&kp N3>; layers = <0>; require-prior-idle-ms = <200>; };
        n4 { key-positions = <posR posF>;  bindings = <&kp N4>; layers = <0>; require-prior-idle-ms = <200>; };
        n5 { key-positions = <posT posG>;  bindings = <&kp N5>; layers = <0>; require-prior-idle-ms = <200>; };
        n6 { key-positions = <posZ posH>;  bindings = <&kp N6>; layers = <0>; require-prior-idle-ms = <200>; };
        n7 { key-positions = <posU posJ>;  bindings = <&kp N7>; layers = <0>; require-prior-idle-ms = <200>; };
        n8 { key-positions = <posI posK>;  bindings = <&kp N8>; layers = <0>; require-prior-idle-ms = <200>; };
        n9 { key-positions = <posO posL>;  bindings = <&kp N9>; layers = <0>; require-prior-idle-ms = <200>; };
        n0 { key-positions = <posP posOE>; bindings = <&kp N0>; layers = <0>; require-prior-idle-ms = <200>; };

        codeArrowLeft  { key-positions = <posA posS>;  bindings = <&tp_lt_minus>; layers = <CDE>; require-prior-idle-ms = <100>; };
        codeArrowRight { key-positions = <posL posOE>; bindings = <&tp_minus_gt>; layers = <CDE>; require-prior-idle-ms = <100>; };

        mute { key-positions = <posF posG>; bindings = <&kp C_MUTE>; layers = <TRI>; require-prior-idle-ms = <200>; };
        playpause { key-positions = <posR posT>; bindings = <&kp C_PP>; layers = <TRI>; require-prior-idle-ms = <200>; };

        comment { key-positions = <posI posO>; bindings = <&kp LS(LG(N7))>; layers = <CDE>; require-prior-idle-ms = <200>; };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <CDE NAV>;
            then-layer = <TRI>;
        };
    };

    macros {
        ZMK_MACRO(r_bt0_clr, bindings = <&bt BT_SEL 0 &bt BT_CLR>; wait-ms = <0>;)
        ZMK_MACRO(r_bt1_clr, bindings = <&bt BT_SEL 1 &bt BT_CLR>; wait-ms = <0>;)
        
        // "type" macros
        ZMK_MACRO(tp_lt_minus, bindings = <&macro_tap &kp DE_LT &kp DE_MINUS>; wait-ms = <10>;)
        ZMK_MACRO(tp_minus_gt, bindings = <&macro_tap &kp DE_MINUS &kp DE_GT>; wait-ms = <10>;)

        R_UNICODE(uni_times,  N0, N0, D,  N7) // ×  U+00D7  MULTIPLICATION SIGN
        R_UNICODE(uni_fwast,  F,  F,  N0, A)  // ＊  U+FF0A  FULLWIDTH ASTERISK
        R_UNICODE(uni_square, N0, N0, B,  N2) // ²  U+00B2   SUPERSCRIPT TWO
        R_UNICODE(uni_hun_o,  N0, N1, N5, N1) // ő  U+0151  LATIN SMALL LETTER O WITH DOUBLE ACUTE
        R_UNICODE(uni_rarr,   N2, N1, N9, N2) // →  U+2192  RIGHTWARDS ARROW
        R_UNICODE(uni_larr,   N2, N1, N9, N0) // ←  U+2190  LEFTWARDS ARROW

        ZMK_MACRO(emoji, bindings = <&macro_press &kp GLOBE>, <&macro_tap &kp E>, <&macro_release &kp GLOBE>; wait-ms = <0>;)
    };

    behaviors {
        R_SHIFTED(mm_btsel0, <&bt BT_SEL 0>, <&r_bt0_clr>)
        R_SHIFTED(mm_btsel1, <&bt BT_SEL 1>, <&r_bt1_clr>)
        R_SHIFTED(mm_out, <&out OUT_BLE>, <&out OUT_USB>)

        R_SHIFTED(mm_bri, <&kp C_BRI_UP>, <&kp C_BRI_DN>)
        R_SHIFTED(mm_arr, <&uni_rarr>, <&uni_larr>)

        R_SHIFTED(mm_uml_circ, <&kp RA(U)>, <&kp DE_CARET>)
        R_SHIFTED(mm_bspc, <&kp BSPC>, <&kp DELETE>)

        R_SHIFT_CMD_NUM(mm_3, N3)
        R_SHIFT_CMD_NUM(mm_4, N4)
        R_SHIFT_CMD_NUM(mm_7, N7)

        sthld: behavior_sthld {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sk>;
            // TODO: use quick-release for sticky key?
        }; // usage: &sthld RSHIFT RSHIFT

        magicshift_inner: magicshift_inner {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&sk RSHIFT>, <&caps_word>;
        };
        magicshift: behavior_magicshift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&magicshift_inner>;
        }; // usage: &magicshift RSHIFT 0
    };
};
