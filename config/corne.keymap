#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "../de-mac/keys_de.h"

&mt {
    // default is "hold-preferred"
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";
        // )-RPAR ]-RBKT }-RBRC

        qw {
            bindings = <&kp DE_LBRC>;
            key-positions = <1 2>;
            layers = <0>;
        };

        we {
            bindings = <&kp DE_LPAR>;
            key-positions = <2 3>;
            layers = <0>;
        };

        er {
            bindings = <&kp DE_LBKT>;
            key-positions = <3 4>;
            layers = <0>;
        };

        xc {
            bindings = <&kp DE_LBRC>;
            key-positions = <26 27>;
            layers = <0>;
        };

        cv {
            bindings = <&kp DE_BACKSLASH>;
            key-positions = <27 28>;
            layers = <0>;
        };

        ui {
            bindings = <&kp DE_RBKT>;
            key-positions = <7 8>;
            layers = <0>;
        };

        io {
            bindings = <&kp DE_RPAR>;
            key-positions = <8 9>;
            layers = <0>;
        };

        op {
            bindings = <&kp DE_RBRC>;
            key-positions = <9 10>;
            layers = <0>;
        };

        m_comma {
            bindings = <&kp DE_SLASH>;
            key-positions = <31 32>;
            layers = <0>;
        };

        comma_dot {
            bindings = <&kp DE_RIGHT_BRACE>;
            key-positions = <32 33>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_base {
            bindings = <
&mt ESC TAB  &kp DE_Q        &kp DE_W       &kp DE_E       &kp DE_R         &kp DE_T     &kp DE_Z  &kp DE_U         &kp DE_I           &kp DE_O       &kp DE_P           &kp BSPC
&kp LCTRL    &mt LCTRL DE_A  &mt LALT DE_S  &mt LCMD DE_D  &mt RSHIFT DE_F  &kp DE_G     &kp DE_H  &mt RSHIFT DE_J  &mt RCMD DE_K      &mt RALT DE_L  &mt RCTRL DE_PLUS  &kp DE_HASH
&kp LCMD     &kp DE_Y        &kp DE_X       &kp DE_C       &kp DE_V         &kp DE_B     &kp DE_N  &kp DE_M         &kp DE_COMMA       &kp DE_DOT     &kp DE_MINUS       &kp RSHIFT
                                               &kp LCMD       &kp RETURN       &mo 1        &mo 2     &kp SPACE        &kp LALT
            >;
        };

        layer_lower {
            bindings = <
&mt ESC TAB  &kp DE_CARET  &kp DE_ACUTE  &trans         &trans        &trans       &trans        &kp DE_N7  &kp DE_N8  &kp DE_N9  &kp N0        &kp DE_SZ
&kp LCTRL    &kp DE_EXCL   &kp DE_DQT    &kp DE_DOLLAR  &kp DE_PRCNT  &kp DE_AMPS  &kp DE_SLASH  &kp DE_N4  &kp DE_N5  &kp DE_N6  &kp DE_PLUS   &kp RALT
&kp LCMD     &kp DE_EQUAL  &kp DE_LBRC   &kp DE_RBRC    &trans        &trans       &kp DE_ASTRK  &kp DE_N1  &kp DE_N2  &kp DE_N3  &kp DE_MINUS  &kp RSHIFT
                                         &kp LCMD       &trans        &none        &mo 2         &trans     &kp LALT
            >;
        };

        layer_raise {
            bindings = <
&kp DE_CARET  &kp DE_N1  &kp DE_N2  &kp DE_N3  &kp DE_N4   &kp DE_N5  &kp DE_N6  &kp DE_N7  &kp DE_N8  &kp DE_N9  &kp DE_N0  &kp DE_ACUTE
&kp LCTRL     &trans     &trans     &trans     &trans      &trans     &trans     &trans     &kp UP     &trans     &kp DE_SZ  &kp RALT
&kp LCMD      &kp DE_LT  &trans     &trans     &trans      &trans     &trans     &kp LEFT   &kp DOWN   &kp RIGHT  &trans     &kp RSHIFT
                                    &kp LCMD   &kp RETURN  &mo 1     &trans      &kp SPACE  &kp LALT
            >;
        };

        layer_tri {
            bindings = <
&trans      &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &trans        &trans        &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
